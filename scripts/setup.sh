#!/bin/bash
# LeanCloud First-Run Setup Script
# This script configures the initial setup for LeanCloud

set -e

echo "============================================"
echo "LeanCloud First-Run Setup"
echo "============================================"
echo

# Check if Python is available
if ! command -v python3 &> /dev/null; then
    echo "Error: Python 3 is required but not installed."
    exit 1
fi

# Function to generate secure random string
generate_secret() {
    python3 -c "import secrets; print(secrets.token_urlsafe(32))"
}

# Function to prompt for input with default
prompt_with_default() {
    local prompt="$1"
    local default="$2"
    local varname="$3"
    
    if [ -n "$default" ]; then
        read -p "$prompt [$default]: " input
        if [ -z "$input" ]; then
            eval "$varname='$default'"
        else
            eval "$varname='$input'"
        fi
    else
        read -p "$prompt: " input
        eval "$varname='$input'"
    fi
}

# Function to prompt for password
prompt_password() {
    local prompt="$1"
    local varname="$2"
    
    while true; do
        read -s -p "$prompt: " password1
        echo
        read -s -p "Confirm password: " password2
        echo
        
        if [ "$password1" = "$password2" ]; then
            eval "$varname='$password1'"
            break
        else
            echo "Passwords do not match. Please try again."
        fi
    done
}

echo "Setting up LeanCloud configuration..."
echo

# Admin credentials
echo "=== Admin User Setup ==="
prompt_with_default "Admin email" "admin@example.com" "ADMIN_EMAIL"
prompt_password "Admin password" "ADMIN_PASSWORD"
echo

# Database configuration
echo "=== Database Configuration ==="
echo "Choose database type:"
echo "1) PostgreSQL (recommended for production)"
echo "2) SQLite (good for development/testing)"
read -p "Select database type [1]: " db_choice

if [ "$db_choice" = "2" ]; then
    DATABASE_URL="sqlite+aiosqlite:///./httpx_scanner.db"
    echo "Using SQLite database"
else
    prompt_with_default "PostgreSQL host" "localhost" "PG_HOST"
    prompt_with_default "PostgreSQL port" "5432" "PG_PORT"
    prompt_with_default "PostgreSQL database" "httpx_scanner" "PG_DB"
    prompt_with_default "PostgreSQL user" "httpx" "PG_USER"
    prompt_password "PostgreSQL password" "PG_PASS"
    DATABASE_URL="postgresql+asyncpg://$PG_USER:$PG_PASS@$PG_HOST:$PG_PORT/$PG_DB"
fi
echo

# Redis configuration
echo "=== Redis Configuration ==="
read -p "Enable Redis for pub/sub and caching? [Y/n]: " enable_redis
if [[ "$enable_redis" =~ ^[Nn]$ ]]; then
    USE_REDIS="false"
    REDIS_URL="redis://localhost:6379/0"
    echo "Redis disabled"
else
    USE_REDIS="true"
    prompt_with_default "Redis URL" "redis://localhost:6379/0" "REDIS_URL"
fi
echo

# Scanner configuration
echo "=== Scanner Configuration ==="
prompt_with_default "Maximum concurrency" "1000" "MAX_CONCURRENCY"
prompt_with_default "Rate limit (requests per minute)" "60" "RATE_LIMIT_PER_MINUTE"
echo

# CORS origins
echo "=== Security Configuration ==="
prompt_with_default "CORS origins (comma-separated)" "http://localhost:8000,http://127.0.0.1:8000" "CORS_ORIGINS"
echo

# Generate secrets
echo "Generating secure secrets..."
SECRET_KEY=$(generate_secret)
JWT_SECRET_KEY=$(generate_secret)

# Create .env file
echo "Creating .env file..."
cat > .env << EOF
# LeanCloud Configuration - Generated by setup script
# $(date)

# Security
SECRET_KEY=$SECRET_KEY
JWT_SECRET_KEY=$JWT_SECRET_KEY
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=60

# Admin User
ADMIN_EMAIL=$ADMIN_EMAIL
ADMIN_PASSWORD=$ADMIN_PASSWORD

# Database Configuration
DATABASE_URL=$DATABASE_URL

# Redis Configuration
REDIS_URL=$REDIS_URL
USE_REDIS=$USE_REDIS

# CORS Settings
CORS_ORIGINS=$CORS_ORIGINS

# Rate Limiting
RATE_LIMIT_PER_MINUTE=$RATE_LIMIT_PER_MINUTE

# Scanner Configuration
MAX_CONCURRENCY=$MAX_CONCURRENCY
MAX_SCAN_RETENTION_DAYS=30
HTTPX_PATH=httpx

# Development Settings
DEBUG=false
RELOAD=false
EOF

# Update config.yml
if [ -f "data/config.yml" ]; then
    echo "Updating data/config.yml..."
    python3 << EOF
import yaml

# Load existing config
with open('data/config.yml', 'r') as f:
    config = yaml.safe_load(f) or {}

# Update setup flags
config['first_run'] = False
config['setup_completed'] = True
config['rate_limit_per_minute'] = $RATE_LIMIT_PER_MINUTE

# Write back
with open('data/config.yml', 'w') as f:
    yaml.dump(config, f, default_flow_style=False, indent=2)
EOF
fi

echo
echo "============================================"
echo "Setup completed successfully!"
echo "============================================"
echo
echo "Configuration saved to:"
echo "  - .env (environment variables)"
echo "  - data/config.yml (application config)"
echo
echo "Next steps:"
echo "1. Start the services:"
echo "   docker compose up -d"
echo "2. Access the web interface:"
echo "   http://localhost:8000"
echo "3. Login with your admin credentials"
echo
echo "For production deployment:"
echo "- Review and secure your .env file"
echo "- Configure proper SSL/TLS certificates"
echo "- Set up monitoring and backups"
echo